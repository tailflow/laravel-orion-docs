(window.webpackJsonp=window.webpackJsonp||[]).push([[13],{438:function(e,t,o){"use strict";o.r(t);var a=o(65),r=Object(a.a)({},(function(){var e=this,t=e.$createElement,o=e._self._c||t;return o("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[o("h1",{attrs:{id:"introduction"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#introduction"}},[e._v("#")]),e._v(" Introduction")]),e._v(" "),o("h2",{attrs:{id:"how-it-works"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#how-it-works"}},[e._v("#")]),e._v(" How It Works")]),e._v(" "),o("p",[e._v("Laravel Orion uses the most powerful features of Laravel: Eloquent models and relationships, policies, request classes, and API resources, which makes it incredibly powerful and extensible, yet simple to get started with.")]),e._v(" "),o("p",[e._v("You create a controller, associate it with Eloquent model you would like to manage via API and let Laravel Orion do the REST (see what I've done here ðŸ˜„ ) for you! All endpoints for "),o("code",[e._v("index")]),e._v(", "),o("code",[e._v("search")]),e._v(", "),o("code",[e._v("show")]),e._v(", "),o("code",[e._v("store")]),e._v(", "),o("code",[e._v("update")]),e._v(", "),o("code",[e._v("destroy")]),e._v(", "),o("code",[e._v("restore")]),e._v(" and "),o("code",[e._v("batchStore")]),e._v(", "),o("code",[e._v("batchUpdate")]),e._v(", "),o("code",[e._v("batchDestroy")]),e._v(", "),o("code",[e._v("batchRestore")]),e._v(" operations will already be there with proper authorization, validation and error handling (you need to define policies and request classes yourself, of course).")]),e._v(" "),o("p",[e._v("But it does not end here. Define relationship controllers, and it will allow your API consumers to manage all types of relations. Yes, all, which means "),o("code",[e._v("associate")]),e._v("/"),o("code",[e._v("dissociate")]),e._v(", "),o("code",[e._v("attach")]),e._v("/"),o("code",[e._v("detach")]),e._v(", "),o("code",[e._v("sync")]),e._v(", "),o("code",[e._v("toggle")]),e._v(", "),o("code",[e._v("updatePivot")]),e._v(" as well as CRUD operations are available via a standardized REST API.")]),e._v(" "),o("p",[e._v("And, as a bonus, "),o("code",[e._v("search")]),e._v(" endpoint on both model and relationship controllers allows applying all sorts of query constraints to retrieve filtered results.")]),e._v(" "),o("h2",{attrs:{id:"features"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#features"}},[e._v("#")]),e._v(" Features")]),e._v(" "),o("ul",[o("li",[e._v("REST API for "),o("RouterLink",{attrs:{to:"/v1.x/guide/models.html"}},[e._v("models")]),e._v(" and "),o("RouterLink",{attrs:{to:"/v1.x/guide/relationships.html"}},[e._v("relationships")]),e._v(" with batch operations support")],1),e._v(" "),o("li",[e._v("Comprehensive set of endpoint "),o("RouterLink",{attrs:{to:"/v1.x/guide/hooks.html"}},[e._v("hooks")])],1),e._v(" "),o("li",[e._v("Advanced searching capabilities with "),o("RouterLink",{attrs:{to:"/v1.x/guide/search.html#sorting"}},[e._v("sorting")]),e._v(", "),o("RouterLink",{attrs:{to:"/v1.x/guide/search.html#filtering"}},[e._v("filtering")]),e._v(", and "),o("RouterLink",{attrs:{to:"/v1.x/guide/search.html#keyword-search"}},[e._v("keyword search")])],1),e._v(" "),o("li",[o("RouterLink",{attrs:{to:"/v1.x/guide/query-parameters.html#including-relations"}},[e._v("Relations inclusion")]),e._v(" and "),o("RouterLink",{attrs:{to:"/v1.x/guide/query-parameters.html#soft-deletes"}},[e._v("soft deletes")]),e._v(" via query parameters")],1),e._v(" "),o("li",[e._v("Straightforward "),o("RouterLink",{attrs:{to:"/v1.x/guide/security.html#authorization"}},[e._v("authorization")]),e._v(" and "),o("RouterLink",{attrs:{to:"/v1.x/guide/security.html#validation"}},[e._v("validation")])],1),e._v(" "),o("li",[o("RouterLink",{attrs:{to:"/v1.x/guide/responses.html"}},[e._v("Responses")]),e._v(" transformation via API resources")],1)])])}),[],!1,null,null,null);t.default=r.exports}}]);