(window.webpackJsonp=window.webpackJsonp||[]).push([[9],{433:function(e,t,r){"use strict";r.r(t);var a=r(65),o=Object(a.a)({},(function(){var e=this,t=e.$createElement,r=e._self._c||t;return r("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[r("h1",{attrs:{id:"community"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#community"}},[e._v("#")]),e._v(" Community")]),e._v(" "),r("p",[r("a",{attrs:{href:"https://twitter.com/LukeDiebold",target:"_blank",rel:"noopener noreferrer"}},[e._v("@Luke Diebold"),r("OutboundLink")],1),e._v(" is creating a series of screencasts that cover a wide range of Laravel Orion features. Huge thanks to all the efforts put into this ‚ù§Ô∏è")]),e._v(" "),r("p",[r("em",[e._v("NOTE: this is ongoing series - more episodes will be added as soon as they become available.")])]),e._v(" "),r("h2",{attrs:{id:"introduction"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#introduction"}},[e._v("#")]),e._v(" Introduction")]),e._v(" "),r("p",[e._v("What is Laravel Orion? What it can do? Let's find out in this introductory episode to the series of Laravel Orion screencasts.")]),e._v(" "),r("iframe",{attrs:{width:"560",height:"315",src:"https://www.youtube.com/embed/x3h6HwQNN38",frameborder:"0",allow:"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture",allowfullscreen:""}}),e._v(" "),r("h2",{attrs:{id:"project-setup-and-basic-crud"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#project-setup-and-basic-crud"}},[e._v("#")]),e._v(" Project setup and basic CRUD")]),e._v(" "),r("p",[e._v("In this episode, Luke walks you through the project setup, Sanctum configuration, and your first REST API for managing Post models.")]),e._v(" "),r("iframe",{attrs:{width:"560",height:"315",src:"https://www.youtube.com/embed/eVvxLvkeXUM",frameborder:"0",allow:"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture",allowfullscreen:""}}),e._v(" "),r("h2",{attrs:{id:"preparing-migrations-and-models"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#preparing-migrations-and-models"}},[e._v("#")]),e._v(" Preparing migrations and models")]),e._v(" "),r("p",[e._v("Before diving into the search functionality, we need to prepare our models and migrations. The episode covers all the necessary steps to get you ready for exploring Laravel Orion's search magic üòÉ")]),e._v(" "),r("iframe",{attrs:{width:"560",height:"315",src:"https://www.youtube.com/embed/cqnhEHu9qJg",frameborder:"0",allow:"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture",allowfullscreen:""}}),e._v(" "),r("h2",{attrs:{id:"search-keyword-search"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#search-keyword-search"}},[e._v("#")]),e._v(" Search - keyword search")]),e._v(" "),r("p",[e._v("One of the available search options is keyword search. It allows you to lookup models that match a provided keyword in "),r("em",[r("strong",[e._v("any")])]),e._v(" of the specified attributes, similar to what a typical search bar does.")]),e._v(" "),r("iframe",{attrs:{width:"560",height:"315",src:"https://www.youtube.com/embed/q6ZPW8iw4ks",frameborder:"0",allow:"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture",allowfullscreen:""}}),e._v(" "),r("h2",{attrs:{id:"search-filters"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#search-filters"}},[e._v("#")]),e._v(" Search - filters")]),e._v(" "),r("p",[e._v("Another way of searching for models is to use filters. Think of it as writing Eloquent query, but on the frontend side.")]),e._v(" "),r("iframe",{attrs:{width:"560",height:"315",src:"https://www.youtube.com/embed/IrvQCB7FMUk",frameborder:"0",allow:"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture",allowfullscreen:""}}),e._v(" "),r("h2",{attrs:{id:"search-sorting"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#search-sorting"}},[e._v("#")]),e._v(" Search - sorting")]),e._v(" "),r("p",[e._v("When performing a search query, you can also sort the results. Let's take a look how you can accomplish that, shall we? üòÉ")]),e._v(" "),r("iframe",{attrs:{width:"560",height:"315",src:"https://www.youtube.com/embed/PibHcj3EwlQ",frameborder:"0",allow:"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture",allowfullscreen:""}}),e._v(" "),r("h2",{attrs:{id:"search-scopes"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#search-scopes"}},[e._v("#")]),e._v(" Search - scopes")]),e._v(" "),r("p",[e._v("When doing a lookup, you can take it one step further, and make the API even simpler and more maintainable by utilizing scopes.")]),e._v(" "),r("iframe",{attrs:{width:"560",height:"315",src:"https://www.youtube.com/embed/dxo6ZYF8B0Y",frameborder:"0",allow:"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture",allowfullscreen:""}}),e._v(" "),r("h2",{attrs:{id:"pagination"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#pagination"}},[e._v("#")]),e._v(" Pagination")]),e._v(" "),r("p",[e._v("In this episode Luke walks you through the pagination meta data and how you can use it for building pagination links on the frontend.")]),e._v(" "),r("iframe",{attrs:{width:"560",height:"315",src:"https://www.youtube.com/embed/6_Akr_ldKCQ",frameborder:"0",allow:"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture",allowfullscreen:""}}),e._v(" "),r("h2",{attrs:{id:"soft-deletes-laravel"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#soft-deletes-laravel"}},[e._v("#")]),e._v(" Soft Deletes (Laravel)")]),e._v(" "),r("p",[e._v("Before jumping into Soft Deletes functionality specific to Laravel Orion, let's review how Soft Deletes work in Laravel itself.")]),e._v(" "),r("iframe",{attrs:{width:"560",height:"315",src:"https://www.youtube.com/embed/548pfXfgQWk",frameborder:"0",allow:"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture",allowfullscreen:""}}),e._v(" "),r("h2",{attrs:{id:"soft-deletes"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#soft-deletes"}},[e._v("#")]),e._v(" Soft Deletes")]),e._v(" "),r("p",[e._v("Now, when we have a clear understanding of how Soft Deletes work in Laravel, we can explore the available options on how to work with them via the API.")]),e._v(" "),r("iframe",{attrs:{width:"560",height:"315",src:"https://www.youtube.com/embed/zTQPbcx353Q",frameborder:"0",allow:"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture",allowfullscreen:""}})])}),[],!1,null,null,null);t.default=o.exports}}]);